// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package app

import (
	"github.com/LyricTian/gin-admin/v7/internal/app/api"
	"github.com/LyricTian/gin-admin/v7/internal/app/bll"
	"github.com/LyricTian/gin-admin/v7/internal/app/model/gormx/service"
	"github.com/LyricTian/gin-admin/v7/internal/app/module/adapter"
	"github.com/LyricTian/gin-admin/v7/internal/app/router"
)

import (
	_ "github.com/LyricTian/gin-admin/v7/internal/app/swagger"
)

// Injectors from wire.go:

// BuildInjector 生成注入器
func BuildInjector() (*Injector, func(), error) {
	auther, cleanup, err := InitAuth()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := InitGormDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	role := &service.Role{
		DB: db,
	}
	roleMenu := &service.RoleMenu{
		DB: db,
	}
	menuActionResource := &service.MenuActionResource{
		DB: db,
	}
	user := &service.User{
		DB: db,
	}
	userRole := &service.UserRole{
		DB: db,
	}
	casbinAdapter := &adapter.CasbinAdapter{
		RoleModel:         role,
		RoleMenuModel:     roleMenu,
		MenuResourceModel: menuActionResource,
		UserModel:         user,
		UserRoleModel:     userRole,
	}
	syncedEnforcer, cleanup3, err := InitCasbin(casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	demo := &service.Demo{
		DB: db,
	}
	bllDemo := &bll.Demo{
		DemoModel: demo,
	}
	apiDemo := &api.Demo{
		DemoBll: bllDemo,
	}
	menu := &service.Menu{
		DB: db,
	}
	menuAction := &service.MenuAction{
		DB: db,
	}
	login := &bll.Login{
		Auth:            auther,
		UserModel:       user,
		UserRoleModel:   userRole,
		RoleModel:       role,
		RoleMenuModel:   roleMenu,
		MenuModel:       menu,
		MenuActionModel: menuAction,
	}
	apiLogin := &api.Login{
		LoginBll: login,
	}
	trans := &service.Trans{
		DB: db,
	}
	bllMenu := &bll.Menu{
		TransModel:              trans,
		MenuModel:               menu,
		MenuActionModel:         menuAction,
		MenuActionResourceModel: menuActionResource,
	}
	apiMenu := &api.Menu{
		MenuBll: bllMenu,
	}
	bllRole := &bll.Role{
		Enforcer:      syncedEnforcer,
		TransModel:    trans,
		RoleModel:     role,
		RoleMenuModel: roleMenu,
		UserModel:     user,
	}
	apiRole := &api.Role{
		RoleBll: bllRole,
	}
	bllUser := &bll.User{
		Enforcer:      syncedEnforcer,
		TransModel:    trans,
		UserModel:     user,
		UserRoleModel: userRole,
		RoleModel:     role,
	}
	apiUser := &api.User{
		UserBll: bllUser,
	}
	routerRouter := &router.Router{
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		DemoAPI:        apiDemo,
		LoginAPI:       apiLogin,
		MenuAPI:        apiMenu,
		RoleAPI:        apiRole,
		UserAPI:        apiUser,
	}
	engine := InitGinEngine(routerRouter)
	injector := &Injector{
		Engine:         engine,
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		MenuBll:        bllMenu,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
